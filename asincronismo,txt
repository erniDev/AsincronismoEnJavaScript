Los lenguajes de programación son sincrónicos...

JavaScript es síncrono por defecto y tiene un solo subproceso.

JavaScript es síncrono y no bloqueante, con un bucle de eventos (concurrencia), implementado con un único 
hilo para sus interfaces de 1/0.

JavaScript es single-threaded
    Aún con múltiples procesadores, solo se puede ejecutar tareas en un solo hilo, llamado el hilo
    principal.

Bloqueante:
    Una tarea no devuelve el control hasta que se ha completado.

No bloqueante:
    Una tarea se devuelve inmediatamente con independencia del resultado. Si se completó,
    devuelve los datos. Si no, un error.

Síncrono:
    Las tareas se ejecutan de forma secuencial, se debe esperar a que se complete para continuar con la     siguiente tarea.

Asíncrono:
    Las tareas pueden ser realizadas más tarde, lo que hace posible que una respuesta sea procesada en  diferido.

Concurrencia en JavaScript
    Utiliza un modelo de concurrencia basado en un "loop de eventos".

EventLoop
    El bucle de eventos es un patrón de diseño que espera y distribuye eventos o mensajes en un programa.

Formas de manejar la asincronía en JavaScript

    Callbacks...
        Una función que se pasa como argumento de otra función y que será invocada.

    Promesas... (ES6)
        Función no-bloqueante y asíncrona la cual puede retornar un valor ahora, en el futuro o nunca.

    Async / Await... (ES2017)
        Permite estructurar una función asincrónica sin bloqueo de una manera similar a una función sincrónica  ordinaria.


    JavaScript acaba de convertirse en Multi-Threaded con la capacidad de realizar
    múltiples tareas simultáneamente.

    Esto cambia nuestra definición de JavaScript...

    JavaScript es: asíncrono y no bloqueante, con un bucle de eventos (concurrencia)
    implementado con un único hilo para sus interfaces de 1/0.